pipeline {
    library 'radiant-pipeline-library'

    agent any
    // Configurable parameters for users to skip steps and control pipeline behavior
    parameters {
        booleanParam(name: 'Destroy_VM', defaultValue: true)   
        booleanParam(name: 'License_headers', defaultValue: true)
        booleanParam(name: 'Vagrant_up', defaultValue: true)
        booleanParam(name: 'Core_tests', defaultValue: true)
        booleanParam(name: 'Services_tests', defaultValue: true)
        string(name: 'Box', defaultValue: 'hoot_centos7_prov', description: 'Vagrant Box')
    }
    stages {
        stage("Destroy VM") {
            when { expression { return params.Destroy_VM } }
            steps {
                // Attempt to destroy exiting VM but don't stop job if not there
                sh "vagrant destroy -f ${params.Box} || true"
            }
        }
        stage("Setup") {
            steps {              
                // Make sure we have the tags info because figuring out the version is required in the build process
                sh '''
                    git fetch --tags
                    git submodule update --init
                    cp -R ../software.ubuntu1404 software
                '''
            }
        }
        stage("License Header") {
            when { expression { return params.License_headers } }
            steps {
                script { 
                    sh '''
                    export HOOT_HOME=`pwd`
                        ./scripts/copyright/UpdateAllCopyrightHeaders.sh
                        '''
                }
            }
        }
        stage("Vagrant up") {
            when { expression { return params.Vagrant_up } }
            steps {
                // NOTE: Ubuntu only, may need more complex logic if other OS are included in pipeline
                sh '''
                    cp LocalConfig.pri.orig LocalConfig.pri
                    echo "QMAKE_CXXFLAGS += -Werror" >> LocalConfig.pri
                    sed -i s/"QMAKE_CXX=g++"/"#QMAKE_CXX=g++"/g LocalConfig.pri
                    sed -i s/"#QMAKE_CXX=ccache g++"/"QMAKE_CXX=ccache g++"/g LocalConfig.pri
                '''

                sh "vagrant up ${params.Box} --provision-with software,hoot,build,EGD,tomcat,mapnik,hadoop --provider aws"
            }       
        }
        stage("Core Tests") {
            when { expression { return params.Core_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; source ./SetupEnv.sh; hoot --version --debug; bin/HootTest --diff --glacial --parallel \$(nproc)'"
            }
        }
        stage("Services Tests") {
            when { expression { return params.Services_tests } }
            steps {
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` pp-test'"
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` plugins-test'"
                sh "vagrant ssh ${params.Box} -c 'cd hoot; make -sj`nproc` services-test'"
            }
        }
    }
    post {
        success {
            // If all tests passed, clean everything up
            sh "vagrant destroy -f ${params.Box}"
            cleanWs()
        }
        failure {
            script {
                emailext (
                    subject: "Failure: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    mimeType: 'text/html',
                    body: """<p>Failure: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                    recipientProviders: [
                        [$class: 'DevelopersRecipientProvider'],
                        [$class: 'CulpritsRecipientProvider'],
 -                      [$class: 'RequesterRecipientProvider']]
                )
            }
        }
        changed {
            script {
                // Job has been fixed
                if (currentBuild.currentResult == 'SUCCESS') {
                    emailext (
                        subject: "Back to normal: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                        mimeType: 'text/html',
                        body: """<p>Fixed: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                        <p>Check console output at &QUOT;<a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>""",
                        recipientProviders: [
                            [$class: 'DevelopersRecipientProvider'],
                            [$class: 'CulpritsRecipientProvider'],
                            [$class: 'RequesterRecipientProvider']]
                    )
                }
            }
        }
    }
}
